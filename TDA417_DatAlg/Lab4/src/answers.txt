

/******************************************************************************
 *  DAT038, TDA417  Datastrukturer och algoritmer, LP2 2019
 *  Lab 4: Path finder
 ******************************************************************************/

Name of lab group: [Group 39]
Group member A:    [Adnan Fazlinovic]
Group member B:    [Adam Wirehed]


/******************************************************************************
 *  How many hours did you spend on the assignment?
 *****************************************************************************/

Group member A:    [15 h]
Group member B:    [18 h]


/******************************************************************************
 *  List the minimal cost, shortest path, and nr of visited nodes,
 *  for each of the following invocations.
 *****************************************************************************/

$ java RunPathFinder dijkstra AdjacencyGraph graphs/AdjacencyGraph/citygraph-EU.txt "Volos, Greece" "Oulu, Finland"

visited nodes: [961]
minimal cost:  [3488.0]
shortest path: [Volos, Greece -> Timişoara, Romania -> Arad,
 Romania -> Oradea, Romania -> Debrecen, Hungary -> Nyíregyháza,
  Hungary -> Uzhgorod, Ukraine -> Rzeszów, Poland -> Lublin,
   Poland -> Białystok, Poland -> Tallinn, Estonia -> Helsinki, Finland -> Oulu, Finland]

$ java RunPathFinder astar AdjacencyGraph graphs/AdjacencyGraph/citygraph-EU.txt "Volos, Greece" "Oulu, Finland"

visited nodes: [961]
minimal cost:  [3488.0]
shortest path: [Volos, Greece -> Timişoara, Romania -> Arad, Romania -> Oradea, Romania -> Debrecen, Hungary
 -> Nyíregyháza, Hungary -> Uzhgorod, Ukraine -> Rzeszów, Poland -> Lublin, Poland -> Białystok, Poland ->
  Tallinn, Estonia -> Helsinki, Finland -> Oulu, Finland]

$ java RunPathFinder dijkstra NPuzzle 3 "/HFG/BED/C_A/" "/ABC/DEF/GH_/"

visited nodes: [181440]
minimal cost:  [31.0]
shortest path: [/HFG/BED/C_A/ -> /HFG/BED/CA_/ -> /HFG/BE_/CAD/ -> /HF_/BEG/CAD/ -> /H_F/BEG/CAD/
 -> /_HF/BEG/CAD/ -> /BHF/_EG/CAD/ -> /BHF/CEG/_AD/ -> /BHF/CEG/A_D/ -> /BHF/CEG/AD_/ -> /BHF/CE_/ADG/ ->
 /BHF/C_E/ADG/ -> /BHF/_CE/ADG/ -> /BHF/ACE/_DG/ -> /BHF/ACE/D_G/ -> /BHF/ACE/DG_/ -> /BHF/AC_/DGE/ -> /BHF/A_C/DGE/
  -> /B_F/AHC/DGE/ -> /BF_/AHC/DGE/ -> /BFC/AH_/DGE/ -> /BFC/A_H/DGE/ -> /B_C/AFH/DGE/ -> /_BC/AFH/DGE/ ->
  /ABC/_FH/DGE/ -> /ABC/DFH/_GE/ -> /ABC/DFH/G_E/ -> /ABC/DFH/GE_/ -> /ABC/DF_/GEH/ -> /ABC/D_F/GEH/ -> /ABC/DEF/G_H/
   -> /ABC/DEF/GH_/]

$ java RunPathFinder astar NPuzzle 3 "/HFG/BED/C_A/" "/ABC/DEF/GH_/"

visited nodes: [15860]
minimal cost:  [31.0]
shortest path: [/HFG/BED/C_A/ -> /HFG/BED/_CA/ -> /HFG/_ED/BCA/ -> /HFG/E_D/BCA/ -> /H_G/EFD/BCA/ -> /HG_/EFD/BCA/ ->
 /HGD/EF_/BCA/ -> /HGD/EFA/BC_/ -> /HGD/EFA/B_C/ -> /HGD/E_A/BFC/ -> /H_D/EGA/BFC/ -> /HD_/EGA/BFC/ -> /HDA/EG_/BFC/ ->
  /HDA/EGC/BF_/ -> /HDA/EGC/B_F/ -> /HDA/E_C/BGF/ -> /HDA/_EC/BGF/ -> /_DA/HEC/BGF/ -> /D_A/HEC/BGF/ -> /DA_/HEC/BGF/
  -> /DAC/HE_/BGF/ -> /DAC/H_E/BGF/ -> /DAC/_HE/BGF/ -> /DAC/BHE/_GF/ -> /DAC/BHE/G_F/ -> /DAC/B_E/GHF/ ->
  /DAC/_BE/GHF/ -> /_AC/DBE/GHF/ -> /A_C/DBE/GHF/ -> /ABC/D_E/GHF/ -> /ABC/DE_/GHF/ -> /ABC/DEF/GH_/]

$ java RunPathFinder dijkstra NPuzzle 3 "/HGF/BED/C_A/" "/ABC/DEF/GH_/"

visited nodes: [181440]
minimal cost:  [-]
shortest path: [No path found]

$ java RunPathFinder astar NPuzzle 3 "/HGF/BED/C_A/" "/ABC/DEF/GH_/"

visited nodes: [181440]
minimal cost:  [-]
shortest path: [No path found]

$ java RunPathFinder dijkstra GridGraph graphs/GridGraph/AR0011SR.map "23:161" "130:211"

visited nodes: [20813]
minimal cost:  [366.40411229460744]
shortest path: [really?]

$ java RunPathFinder astar GridGraph graphs/GridGraph/AR0011SR.map "23:161" "130:211"

visited nodes: [12761]
minimal cost:  [366.40411229460744]
shortest path: [23:161 -> 23:160 -> 23:159 ->
 23:158 -> 23:157 -> 23:156 -> 23:155 -> ... (a really long list) ...
 -> 132:207 -> 131:208 -> 131:209 -> 131:210 -> 130:211]

$ java RunPathFinder dijkstra WordLadder graphs/WordLadder/words-saldo.txt syster broder

visited nodes: [13626]
minimal cost:  [11.0]
shortest path: [syster -> byster -> bysten -> basten -> basken -> banken -> banden -> bauden
 -> bruden -> bröden -> bröder -> broder]

$ java RunPathFinder astar WordLadder graphs/WordLadder/words-saldo.txt syster broder

visited nodes: [1961]
minimal cost:  [11.0]
shortest path: [syster -> sylter -> salter -> balter -> balder -> barder -> barden -> bauden
 -> bruden -> bräden -> bräder -> broder]


/******************************************************************************
 *  For which of the three classes GridGraph, WordLadder and NPuzzle,
 *  did the heuristics .guessCost() have the most impact?
 * 
 *  Why do you think this is the case?
 *****************************************************************************/

By our measurements the heuristic guessCost had the most inpact on the Npuzzle, and the least on GridGraph.

For the Npuzzle the heuristic calculates, for each tile, the amount of tiles in vertical and horizontal axis that this
said tile differs from the goal. So in the next move makes the current placements closer to the goal, it will be placed
"higher" up in the priority queue. So we will choose the next move to be the one where the majority of the tiles will
be closer to the goal placement.

The reason of drastic improvement on WordLadder is that we choose the 'next' word in the LinkedList that has the most
resemblance to the goal (most amount of same chars at the same index). If the newWord has a lot of char's that are in
 the same position as the goal word, it will get 'higher' up in the pq.


/******************************************************************************
 *  Show pseudo-code of the following methods that you implemented
 *****************************************************************************/

// WordLadder.outgoingEdges(String word)

    ix = 0
    while (char index in word < word.length)
        cpWord = copy of original word.toArray
        for (each char 'c' in charset)
            cpWord[ix] = c
            newWord = cpWord.toString
            if (dictionary contains newWord)
                add edge between original word and newWord in linkedList
       ix++

// WordLadder.guessCost(String v, String w)

[Number of characters to be compared in the strings is the same]
Initialize difference variable
For each character in the strings at position i
	if the characters are not the same
		increment difference variable by one
	else continue to next character

Return difference variable


// GridGraph.guessCost(String v, String w)

[Arguments should be (Coord start, Coord end)]
    Compute x-distance from start coordinate to end coordinate
    Compute y-distance from start coordinate to end coordinate
    Compute distance using Pythagoras theorem
    Distance = square root of (x-distance ^ 2 + y-distance ^2)
    Return distance


/******************************************************************************
 *  Show pseudo-code of method .searchDijkstra() in PathFinder
 *****************************************************************************/

// PathFinder.searchDijkstra(V start, V goal)

* Define and create priority queue and HashMaps *

Add start node with weight 0.0 to pq (pq uses weight from distTo as comparator)

while pq is not empty
    remove min node 'v'
    if this node, v, has not been visited yet, add it to the visited list and increase visitedNodes

    If this node is the goal, calculate the shortest path and return it

    Else: loop through edges to adjacent nodes
        If adjacent nodes is not in distTo, add them with weight pos. infinity

        Calculate the distance from node from start to v to the adjacent node w
        If this distance is shorter than the currently know distance to that node,
        add this new shorter distance to distTo, the new edge from v to w in edgeTo
        and the node w to the pq



/******************************************************************************
 *  What are the main differences between your implementations 
 *  of .searchAstar() and .searchDijkstra()?
 *****************************************************************************/

That we have a new comparator in the priority queue. We have a new HashMap that is called
 'guessTo' which is 'distTo' + guessCost(approx. distance from current node to goal) (heuristic).
 So instead of sorting the pq with respect to the currently known distance, we sort it by the
 guessed distance from the goal as well. Otherwise the code is pretty much the same.


/******************************************************************************
 *  Are there any known bugs / limitations?
 *****************************************************************************/

Not that we are aware of.


/******************************************************************************
 *  Did you collaborate with any other students on this lab?
 *  If so, please write in what way you collaborated and with whom.
 *  Also include any resources (including the web) that you may
 *  may have used in creating your design.
 *****************************************************************************/

No.


/******************************************************************************
 *  Describe any serious problems you encountered.                    
 *****************************************************************************/




/******************************************************************************
 *  List any other comments here. Feel free to provide any feedback   
 *  on how much you learned from doing the assignment, and whether    
 *  you enjoyed doing it.                                             
 *****************************************************************************/

The 'Tip of the day' on the Djikstra implementation was really helpful. Maybe too
 helpful. A variant of that psudocode could be part of the assignment description next year.

  
